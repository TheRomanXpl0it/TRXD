// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package sqlc

import (
	"context"
)

const getBadgesFromTeam = `-- name: GetBadgesFromTeam :many
SELECT badges.name, badges.description FROM badges
  JOIN teams ON teams.id = badges.team_id
  WHERE teams.id = $1
`

type GetBadgesFromTeamRow struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// Retrieve all badges associated with a team
func (q *Queries) GetBadgesFromTeam(ctx context.Context, id int32) ([]GetBadgesFromTeamRow, error) {
	rows, err := q.query(ctx, q.getBadgesFromTeamStmt, getBadgesFromTeam, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBadgesFromTeamRow
	for rows.Next() {
		var i GetBadgesFromTeamRow
		if err := rows.Scan(&i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, password_hash, score, country, image, bio FROM teams WHERE id = $1
`

// Retrieve a team by its ID
func (q *Queries) GetTeamByID(ctx context.Context, id int32) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByIDStmt, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Country,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, password_hash, score, country, image, bio FROM teams WHERE name = $1
`

// Retrieve a team by its name
func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByNameStmt, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Country,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getTeamFromUser = `-- name: GetTeamFromUser :one
SELECT t.id, t.name, t.password_hash, t.score, t.country, t.image, t.bio FROM teams t
  JOIN users u ON u.team_id = t.id
  WHERE u.id = $1
`

// Retrieve the team associated with a user
func (q *Queries) GetTeamFromUser(ctx context.Context, id int32) (Team, error) {
	row := q.queryRow(ctx, q.getTeamFromUserStmt, getTeamFromUser, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Country,
		&i.Image,
		&i.Bio,
	)
	return i, err
}
