// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package sqlc

import (
	"context"
)

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, password_hash, score, nationality, image, bio FROM teams WHERE id = $1
`

// Retrieve a team by its ID
func (q *Queries) GetTeamByID(ctx context.Context, id int32) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByIDStmt, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, password_hash, score, nationality, image, bio FROM teams WHERE name = $1
`

// Retrieve a team by its name
func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByNameStmt, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getTeamFromUser = `-- name: GetTeamFromUser :one
SELECT t.id, t.name, t.password_hash, t.score, t.nationality, t.image, t.bio FROM teams t
  JOIN users u ON u.team_id = t.id
  WHERE u.id = $1
`

// Retrieve the team associated with a user
func (q *Queries) GetTeamFromUser(ctx context.Context, id int32) (Team, error) {
	row := q.queryRow(ctx, q.getTeamFromUserStmt, getTeamFromUser, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}
