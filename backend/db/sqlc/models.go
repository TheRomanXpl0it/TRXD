// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type DeployType string

const (
	DeployTypeNormal    DeployType = "Normal"
	DeployTypeContainer DeployType = "Container"
	DeployTypeCompose   DeployType = "Compose"
)

func (e *DeployType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeployType(s)
	case string:
		*e = DeployType(s)
	default:
		return fmt.Errorf("unsupported scan type for DeployType: %T", src)
	}
	return nil
}

type NullDeployType struct {
	DeployType DeployType `json:"deploy_type"`
	Valid      bool       `json:"valid"` // Valid is true if DeployType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeployType) Scan(value interface{}) error {
	if value == nil {
		ns.DeployType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeployType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeployType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeployType), nil
}

type ScoreType string

const (
	ScoreTypeStatic  ScoreType = "Static"
	ScoreTypeDynamic ScoreType = "Dynamic"
)

func (e *ScoreType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScoreType(s)
	case string:
		*e = ScoreType(s)
	default:
		return fmt.Errorf("unsupported scan type for ScoreType: %T", src)
	}
	return nil
}

type NullScoreType struct {
	ScoreType ScoreType `json:"score_type"`
	Valid     bool      `json:"valid"` // Valid is true if ScoreType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScoreType) Scan(value interface{}) error {
	if value == nil {
		ns.ScoreType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScoreType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScoreType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScoreType), nil
}

type SubmissionStatus string

const (
	SubmissionStatusWrong    SubmissionStatus = "Wrong"
	SubmissionStatusCorrect  SubmissionStatus = "Correct"
	SubmissionStatusRepeated SubmissionStatus = "Repeated"
	SubmissionStatusInvalid  SubmissionStatus = "Invalid"
)

func (e *SubmissionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmissionStatus(s)
	case string:
		*e = SubmissionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmissionStatus: %T", src)
	}
	return nil
}

type NullSubmissionStatus struct {
	SubmissionStatus SubmissionStatus `json:"submission_status"`
	Valid            bool             `json:"valid"` // Valid is true if SubmissionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmissionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubmissionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmissionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmissionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmissionStatus), nil
}

type UserRole string

const (
	UserRoleSpectator UserRole = "Spectator"
	UserRolePlayer    UserRole = "Player"
	UserRoleAuthor    UserRole = "Author"
	UserRoleAdmin     UserRole = "Admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Badge struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	TeamID      int32  `json:"team_id"`
}

type Category struct {
	Name          string `json:"name"`
	VisibleChalls int32  `json:"visible_challs"`
	Icon          string `json:"icon"`
}

type Challenge struct {
	ID          int32      `json:"id"`
	Name        string     `json:"name"`
	Category    string     `json:"category"`
	Description string     `json:"description"`
	Difficulty  string     `json:"difficulty"`
	Authors     string     `json:"authors"`
	Type        DeployType `json:"type"`
	Hidden      bool       `json:"hidden"`
	MaxPoints   int32      `json:"max_points"`
	ScoreType   ScoreType  `json:"score_type"`
	Points      int32      `json:"points"`
	Solves      int32      `json:"solves"`
	Host        string     `json:"host"`
	Port        int32      `json:"port"`
	Attachments string     `json:"attachments"`
}

type Config struct {
	Key         string         `json:"key"`
	Type        string         `json:"type"`
	Value       string         `json:"value"`
	Description sql.NullString `json:"description"`
}

type DockerConfig struct {
	ChallID    int32  `json:"chall_id"`
	Image      string `json:"image"`
	Compose    string `json:"compose"`
	HashDomain bool   `json:"hash_domain"`
	Lifetime   int32  `json:"lifetime"`
	Envs       string `json:"envs"`
	MaxMemory  int32  `json:"max_memory"`
	MaxCpu     string `json:"max_cpu"`
}

type Flag struct {
	Flag    string `json:"flag"`
	ChallID int32  `json:"chall_id"`
	Regex   bool   `json:"regex"`
}

type Instance struct {
	TeamID    int32          `json:"team_id"`
	ChallID   int32          `json:"chall_id"`
	ExpiresAt time.Time      `json:"expires_at"`
	Host      string         `json:"host"`
	Port      sql.NullInt32  `json:"port"`
	DockerID  sql.NullString `json:"docker_id"`
}

type Submission struct {
	ID        int32            `json:"id"`
	UserID    int32            `json:"user_id"`
	ChallID   int32            `json:"chall_id"`
	Status    SubmissionStatus `json:"status"`
	Flag      string           `json:"flag"`
	Timestamp time.Time        `json:"timestamp"`
}

type Tag struct {
	ChallID int32  `json:"chall_id"`
	Name    string `json:"name"`
}

type Team struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	PasswordHash string         `json:"password_hash"`
	PasswordSalt string         `json:"password_salt"`
	Score        int32          `json:"score"`
	Country      sql.NullString `json:"country"`
	Image        sql.NullString `json:"image"`
	Bio          sql.NullString `json:"bio"`
}

type TeamCategorySolf struct {
	TeamID   int32  `json:"team_id"`
	Category string `json:"category"`
	Solves   int32  `json:"solves"`
}

type User struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	PasswordSalt string         `json:"password_salt"`
	CreatedAt    time.Time      `json:"created_at"`
	Score        int32          `json:"score"`
	Role         UserRole       `json:"role"`
	TeamID       sql.NullInt32  `json:"team_id"`
	Country      sql.NullString `json:"country"`
	Image        sql.NullString `json:"image"`
}
