// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addTeamMemberStmt, err = db.PrepareContext(ctx, addTeamMember); err != nil {
		return nil, fmt.Errorf("error preparing query AddTeamMember: %w", err)
	}
	if q.checkFlagsStmt, err = db.PrepareContext(ctx, checkFlags); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFlags: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createChallengeStmt, err = db.PrepareContext(ctx, createChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChallenge: %w", err)
	}
	if q.createConfigStmt, err = db.PrepareContext(ctx, createConfig); err != nil {
		return nil, fmt.Errorf("error preparing query CreateConfig: %w", err)
	}
	if q.createFlagStmt, err = db.PrepareContext(ctx, createFlag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFlag: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteChallengeStmt, err = db.PrepareContext(ctx, deleteChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChallenge: %w", err)
	}
	if q.deleteFlagStmt, err = db.PrepareContext(ctx, deleteFlag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFlag: %w", err)
	}
	if q.getBadgesFromTeamStmt, err = db.PrepareContext(ctx, getBadgesFromTeam); err != nil {
		return nil, fmt.Errorf("error preparing query GetBadgesFromTeam: %w", err)
	}
	if q.getCategoryStmt, err = db.PrepareContext(ctx, getCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategory: %w", err)
	}
	if q.getChallDockerConfigStmt, err = db.PrepareContext(ctx, getChallDockerConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallDockerConfig: %w", err)
	}
	if q.getChallengeByIDStmt, err = db.PrepareContext(ctx, getChallengeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallengeByID: %w", err)
	}
	if q.getChallengeSolvesStmt, err = db.PrepareContext(ctx, getChallengeSolves); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallengeSolves: %w", err)
	}
	if q.getChallengesPreviewStmt, err = db.PrepareContext(ctx, getChallengesPreview); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallengesPreview: %w", err)
	}
	if q.getConfigStmt, err = db.PrepareContext(ctx, getConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetConfig: %w", err)
	}
	if q.getFirstBloodStmt, err = db.PrepareContext(ctx, getFirstBlood); err != nil {
		return nil, fmt.Errorf("error preparing query GetFirstBlood: %w", err)
	}
	if q.getFlagsByChallengeStmt, err = db.PrepareContext(ctx, getFlagsByChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlagsByChallenge: %w", err)
	}
	if q.getTagsByChallengeStmt, err = db.PrepareContext(ctx, getTagsByChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByChallenge: %w", err)
	}
	if q.getTeamByIDStmt, err = db.PrepareContext(ctx, getTeamByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamByID: %w", err)
	}
	if q.getTeamByNameStmt, err = db.PrepareContext(ctx, getTeamByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamByName: %w", err)
	}
	if q.getTeamFromUserStmt, err = db.PrepareContext(ctx, getTeamFromUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamFromUser: %w", err)
	}
	if q.getTeamMembersStmt, err = db.PrepareContext(ctx, getTeamMembers); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamMembers: %w", err)
	}
	if q.getTeamSolvesStmt, err = db.PrepareContext(ctx, getTeamSolves); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamSolves: %w", err)
	}
	if q.getTeamsPreviewStmt, err = db.PrepareContext(ctx, getTeamsPreview); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamsPreview: %w", err)
	}
	if q.getTeamsScoreboardStmt, err = db.PrepareContext(ctx, getTeamsScoreboard); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamsScoreboard: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.getUserSolvesStmt, err = db.PrepareContext(ctx, getUserSolves); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserSolves: %w", err)
	}
	if q.getUsersPreviewStmt, err = db.PrepareContext(ctx, getUsersPreview); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersPreview: %w", err)
	}
	if q.isChallengeSolvedStmt, err = db.PrepareContext(ctx, isChallengeSolved); err != nil {
		return nil, fmt.Errorf("error preparing query IsChallengeSolved: %w", err)
	}
	if q.registerTeamStmt, err = db.PrepareContext(ctx, registerTeam); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterTeam: %w", err)
	}
	if q.registerUserStmt, err = db.PrepareContext(ctx, registerUser); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterUser: %w", err)
	}
	if q.resetTeamPasswordStmt, err = db.PrepareContext(ctx, resetTeamPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetTeamPassword: %w", err)
	}
	if q.resetUserPasswordStmt, err = db.PrepareContext(ctx, resetUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetUserPassword: %w", err)
	}
	if q.submitStmt, err = db.PrepareContext(ctx, submit); err != nil {
		return nil, fmt.Errorf("error preparing query Submit: %w", err)
	}
	if q.updateCategoryIconStmt, err = db.PrepareContext(ctx, updateCategoryIcon); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategoryIcon: %w", err)
	}
	if q.updateChallengeStmt, err = db.PrepareContext(ctx, updateChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChallenge: %w", err)
	}
	if q.updateChallengesCategoryStmt, err = db.PrepareContext(ctx, updateChallengesCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChallengesCategory: %w", err)
	}
	if q.updateConfigStmt, err = db.PrepareContext(ctx, updateConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateConfig: %w", err)
	}
	if q.updateDockerConfigsStmt, err = db.PrepareContext(ctx, updateDockerConfigs); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDockerConfigs: %w", err)
	}
	if q.updateFlagStmt, err = db.PrepareContext(ctx, updateFlag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFlag: %w", err)
	}
	if q.updateTeamStmt, err = db.PrepareContext(ctx, updateTeam); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTeam: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addTeamMemberStmt != nil {
		if cerr := q.addTeamMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTeamMemberStmt: %w", cerr)
		}
	}
	if q.checkFlagsStmt != nil {
		if cerr := q.checkFlagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFlagsStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createChallengeStmt != nil {
		if cerr := q.createChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChallengeStmt: %w", cerr)
		}
	}
	if q.createConfigStmt != nil {
		if cerr := q.createConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createConfigStmt: %w", cerr)
		}
	}
	if q.createFlagStmt != nil {
		if cerr := q.createFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFlagStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteChallengeStmt != nil {
		if cerr := q.deleteChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChallengeStmt: %w", cerr)
		}
	}
	if q.deleteFlagStmt != nil {
		if cerr := q.deleteFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFlagStmt: %w", cerr)
		}
	}
	if q.getBadgesFromTeamStmt != nil {
		if cerr := q.getBadgesFromTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBadgesFromTeamStmt: %w", cerr)
		}
	}
	if q.getCategoryStmt != nil {
		if cerr := q.getCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryStmt: %w", cerr)
		}
	}
	if q.getChallDockerConfigStmt != nil {
		if cerr := q.getChallDockerConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallDockerConfigStmt: %w", cerr)
		}
	}
	if q.getChallengeByIDStmt != nil {
		if cerr := q.getChallengeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallengeByIDStmt: %w", cerr)
		}
	}
	if q.getChallengeSolvesStmt != nil {
		if cerr := q.getChallengeSolvesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallengeSolvesStmt: %w", cerr)
		}
	}
	if q.getChallengesPreviewStmt != nil {
		if cerr := q.getChallengesPreviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallengesPreviewStmt: %w", cerr)
		}
	}
	if q.getConfigStmt != nil {
		if cerr := q.getConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConfigStmt: %w", cerr)
		}
	}
	if q.getFirstBloodStmt != nil {
		if cerr := q.getFirstBloodStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFirstBloodStmt: %w", cerr)
		}
	}
	if q.getFlagsByChallengeStmt != nil {
		if cerr := q.getFlagsByChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagsByChallengeStmt: %w", cerr)
		}
	}
	if q.getTagsByChallengeStmt != nil {
		if cerr := q.getTagsByChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByChallengeStmt: %w", cerr)
		}
	}
	if q.getTeamByIDStmt != nil {
		if cerr := q.getTeamByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamByIDStmt: %w", cerr)
		}
	}
	if q.getTeamByNameStmt != nil {
		if cerr := q.getTeamByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamByNameStmt: %w", cerr)
		}
	}
	if q.getTeamFromUserStmt != nil {
		if cerr := q.getTeamFromUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamFromUserStmt: %w", cerr)
		}
	}
	if q.getTeamMembersStmt != nil {
		if cerr := q.getTeamMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamMembersStmt: %w", cerr)
		}
	}
	if q.getTeamSolvesStmt != nil {
		if cerr := q.getTeamSolvesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamSolvesStmt: %w", cerr)
		}
	}
	if q.getTeamsPreviewStmt != nil {
		if cerr := q.getTeamsPreviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamsPreviewStmt: %w", cerr)
		}
	}
	if q.getTeamsScoreboardStmt != nil {
		if cerr := q.getTeamsScoreboardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamsScoreboardStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.getUserSolvesStmt != nil {
		if cerr := q.getUserSolvesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserSolvesStmt: %w", cerr)
		}
	}
	if q.getUsersPreviewStmt != nil {
		if cerr := q.getUsersPreviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersPreviewStmt: %w", cerr)
		}
	}
	if q.isChallengeSolvedStmt != nil {
		if cerr := q.isChallengeSolvedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isChallengeSolvedStmt: %w", cerr)
		}
	}
	if q.registerTeamStmt != nil {
		if cerr := q.registerTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerTeamStmt: %w", cerr)
		}
	}
	if q.registerUserStmt != nil {
		if cerr := q.registerUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerUserStmt: %w", cerr)
		}
	}
	if q.resetTeamPasswordStmt != nil {
		if cerr := q.resetTeamPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetTeamPasswordStmt: %w", cerr)
		}
	}
	if q.resetUserPasswordStmt != nil {
		if cerr := q.resetUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetUserPasswordStmt: %w", cerr)
		}
	}
	if q.submitStmt != nil {
		if cerr := q.submitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing submitStmt: %w", cerr)
		}
	}
	if q.updateCategoryIconStmt != nil {
		if cerr := q.updateCategoryIconStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryIconStmt: %w", cerr)
		}
	}
	if q.updateChallengeStmt != nil {
		if cerr := q.updateChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChallengeStmt: %w", cerr)
		}
	}
	if q.updateChallengesCategoryStmt != nil {
		if cerr := q.updateChallengesCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChallengesCategoryStmt: %w", cerr)
		}
	}
	if q.updateConfigStmt != nil {
		if cerr := q.updateConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateConfigStmt: %w", cerr)
		}
	}
	if q.updateDockerConfigsStmt != nil {
		if cerr := q.updateDockerConfigsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDockerConfigsStmt: %w", cerr)
		}
	}
	if q.updateFlagStmt != nil {
		if cerr := q.updateFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFlagStmt: %w", cerr)
		}
	}
	if q.updateTeamStmt != nil {
		if cerr := q.updateTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTeamStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	addTeamMemberStmt            *sql.Stmt
	checkFlagsStmt               *sql.Stmt
	createCategoryStmt           *sql.Stmt
	createChallengeStmt          *sql.Stmt
	createConfigStmt             *sql.Stmt
	createFlagStmt               *sql.Stmt
	deleteCategoryStmt           *sql.Stmt
	deleteChallengeStmt          *sql.Stmt
	deleteFlagStmt               *sql.Stmt
	getBadgesFromTeamStmt        *sql.Stmt
	getCategoryStmt              *sql.Stmt
	getChallDockerConfigStmt     *sql.Stmt
	getChallengeByIDStmt         *sql.Stmt
	getChallengeSolvesStmt       *sql.Stmt
	getChallengesPreviewStmt     *sql.Stmt
	getConfigStmt                *sql.Stmt
	getFirstBloodStmt            *sql.Stmt
	getFlagsByChallengeStmt      *sql.Stmt
	getTagsByChallengeStmt       *sql.Stmt
	getTeamByIDStmt              *sql.Stmt
	getTeamByNameStmt            *sql.Stmt
	getTeamFromUserStmt          *sql.Stmt
	getTeamMembersStmt           *sql.Stmt
	getTeamSolvesStmt            *sql.Stmt
	getTeamsPreviewStmt          *sql.Stmt
	getTeamsScoreboardStmt       *sql.Stmt
	getUserByEmailStmt           *sql.Stmt
	getUserByIDStmt              *sql.Stmt
	getUserByNameStmt            *sql.Stmt
	getUserSolvesStmt            *sql.Stmt
	getUsersPreviewStmt          *sql.Stmt
	isChallengeSolvedStmt        *sql.Stmt
	registerTeamStmt             *sql.Stmt
	registerUserStmt             *sql.Stmt
	resetTeamPasswordStmt        *sql.Stmt
	resetUserPasswordStmt        *sql.Stmt
	submitStmt                   *sql.Stmt
	updateCategoryIconStmt       *sql.Stmt
	updateChallengeStmt          *sql.Stmt
	updateChallengesCategoryStmt *sql.Stmt
	updateConfigStmt             *sql.Stmt
	updateDockerConfigsStmt      *sql.Stmt
	updateFlagStmt               *sql.Stmt
	updateTeamStmt               *sql.Stmt
	updateUserStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		addTeamMemberStmt:            q.addTeamMemberStmt,
		checkFlagsStmt:               q.checkFlagsStmt,
		createCategoryStmt:           q.createCategoryStmt,
		createChallengeStmt:          q.createChallengeStmt,
		createConfigStmt:             q.createConfigStmt,
		createFlagStmt:               q.createFlagStmt,
		deleteCategoryStmt:           q.deleteCategoryStmt,
		deleteChallengeStmt:          q.deleteChallengeStmt,
		deleteFlagStmt:               q.deleteFlagStmt,
		getBadgesFromTeamStmt:        q.getBadgesFromTeamStmt,
		getCategoryStmt:              q.getCategoryStmt,
		getChallDockerConfigStmt:     q.getChallDockerConfigStmt,
		getChallengeByIDStmt:         q.getChallengeByIDStmt,
		getChallengeSolvesStmt:       q.getChallengeSolvesStmt,
		getChallengesPreviewStmt:     q.getChallengesPreviewStmt,
		getConfigStmt:                q.getConfigStmt,
		getFirstBloodStmt:            q.getFirstBloodStmt,
		getFlagsByChallengeStmt:      q.getFlagsByChallengeStmt,
		getTagsByChallengeStmt:       q.getTagsByChallengeStmt,
		getTeamByIDStmt:              q.getTeamByIDStmt,
		getTeamByNameStmt:            q.getTeamByNameStmt,
		getTeamFromUserStmt:          q.getTeamFromUserStmt,
		getTeamMembersStmt:           q.getTeamMembersStmt,
		getTeamSolvesStmt:            q.getTeamSolvesStmt,
		getTeamsPreviewStmt:          q.getTeamsPreviewStmt,
		getTeamsScoreboardStmt:       q.getTeamsScoreboardStmt,
		getUserByEmailStmt:           q.getUserByEmailStmt,
		getUserByIDStmt:              q.getUserByIDStmt,
		getUserByNameStmt:            q.getUserByNameStmt,
		getUserSolvesStmt:            q.getUserSolvesStmt,
		getUsersPreviewStmt:          q.getUsersPreviewStmt,
		isChallengeSolvedStmt:        q.isChallengeSolvedStmt,
		registerTeamStmt:             q.registerTeamStmt,
		registerUserStmt:             q.registerUserStmt,
		resetTeamPasswordStmt:        q.resetTeamPasswordStmt,
		resetUserPasswordStmt:        q.resetUserPasswordStmt,
		submitStmt:                   q.submitStmt,
		updateCategoryIconStmt:       q.updateCategoryIconStmt,
		updateChallengeStmt:          q.updateChallengeStmt,
		updateChallengesCategoryStmt: q.updateChallengesCategoryStmt,
		updateConfigStmt:             q.updateConfigStmt,
		updateDockerConfigsStmt:      q.updateDockerConfigsStmt,
		updateFlagStmt:               q.updateFlagStmt,
		updateTeamStmt:               q.updateTeamStmt,
		updateUserStmt:               q.updateUserStmt,
	}
}
