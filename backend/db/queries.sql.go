// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addTeamMember = `-- name: AddTeamMember :exec
UPDATE users SET team_id = $1 WHERE id = $2 AND team_id IS NULL
`

type AddTeamMemberParams struct {
	TeamID sql.NullInt32 `json:"team_id"`
	ID     int32         `json:"id"`
}

// Assign a user to a team
func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.exec(ctx, q.addTeamMemberStmt, addTeamMember, arg.TeamID, arg.ID)
	return err
}

const checkFlags = `-- name: CheckFlags :one
SELECT BOOL_OR(($1 = flag) OR (regex AND $1 ~ flag)) FROM flags WHERE chall_id = $2
`

type CheckFlagsParams struct {
	Flag    string `json:"flag"`
	ChallID int32  `json:"chall_id"`
}

// Check if a flag matches any flags for a challenge
func (q *Queries) CheckFlags(ctx context.Context, arg CheckFlagsParams) (bool, error) {
	row := q.queryRow(ctx, q.checkFlagsStmt, checkFlags, arg.Flag, arg.ChallID)
	var bool_or bool
	err := row.Scan(&bool_or)
	return bool_or, err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (name, icon) VALUES ($1, $2)
`

type CreateCategoryParams struct {
	Name interface{} `json:"name"`
	Icon interface{} `json:"icon"`
}

// Insert a new category
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.exec(ctx, q.createCategoryStmt, createCategory, arg.Name, arg.Icon)
	return err
}

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (name, category, description, type, max_points, score_type)
	VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateChallengeParams struct {
	Name        interface{} `json:"name"`
	Category    interface{} `json:"category"`
	Description string      `json:"description"`
	Type        DeployType  `json:"type"`
	MaxPoints   int32       `json:"max_points"`
	ScoreType   ScoreType   `json:"score_type"`
}

// Insert a new challenge
func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (int32, error) {
	row := q.queryRow(ctx, q.createChallengeStmt, createChallenge,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Type,
		arg.MaxPoints,
		arg.ScoreType,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createConfig = `-- name: CreateConfig :exec
INSERT INTO configs (key, type, value) VALUES ($1, $2, $3)
`

type CreateConfigParams struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

// Insert a new configuration setting
func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) error {
	_, err := q.exec(ctx, q.createConfigStmt, createConfig, arg.Key, arg.Type, arg.Value)
	return err
}

const createFlag = `-- name: CreateFlag :exec
INSERT INTO flags (flag, chall_id, regex) VALUES ($1, $2, $3)
`

type CreateFlagParams struct {
	Flag    string `json:"flag"`
	ChallID int32  `json:"chall_id"`
	Regex   bool   `json:"regex"`
}

// Insert a new flag for a challenge
func (q *Queries) CreateFlag(ctx context.Context, arg CreateFlagParams) error {
	_, err := q.exec(ctx, q.createFlagStmt, createFlag, arg.Flag, arg.ChallID, arg.Regex)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE name = $1
`

// Delete a category and all associated challenges
func (q *Queries) DeleteCategory(ctx context.Context, name interface{}) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, deleteCategory, name)
	return err
}

const deleteChallenge = `-- name: DeleteChallenge :exec
DELETE FROM challenges WHERE id = $1
`

// Delete a challenge and all associated flags
func (q *Queries) DeleteChallenge(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteChallengeStmt, deleteChallenge, id)
	return err
}

const deleteFlag = `-- name: DeleteFlag :exec
DELETE FROM flags WHERE chall_id = $1 AND flag = $2
`

type DeleteFlagParams struct {
	ChallID int32  `json:"chall_id"`
	Flag    string `json:"flag"`
}

// Delete a flag from a challenge
func (q *Queries) DeleteFlag(ctx context.Context, arg DeleteFlagParams) error {
	_, err := q.exec(ctx, q.deleteFlagStmt, deleteFlag, arg.ChallID, arg.Flag)
	return err
}

const getChallengeByID = `-- name: GetChallengeByID :one
SELECT id, name, category, description, difficulty, authors, type, hidden, max_points, score_type, points, solves, host, port, attachments FROM challenges WHERE id = $1
`

// Retrieve a challenge by its ID
func (q *Queries) GetChallengeByID(ctx context.Context, id int32) (Challenge, error) {
	row := q.queryRow(ctx, q.getChallengeByIDStmt, getChallengeByID, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.Difficulty,
		&i.Authors,
		&i.Type,
		&i.Hidden,
		&i.MaxPoints,
		&i.ScoreType,
		&i.Points,
		&i.Solves,
		&i.Host,
		&i.Port,
		&i.Attachments,
	)
	return i, err
}

const getConfig = `-- name: GetConfig :one
SELECT key, type, value, description FROM configs WHERE key = $1
`

// Retrieve a configuration setting by key
func (q *Queries) GetConfig(ctx context.Context, key string) (Config, error) {
	row := q.queryRow(ctx, q.getConfigStmt, getConfig, key)
	var i Config
	err := row.Scan(
		&i.Key,
		&i.Type,
		&i.Value,
		&i.Description,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, password_hash, score, nationality, image, bio FROM teams WHERE name = $1
`

// Retrieve a team by its name
func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByNameStmt, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getTeamFromUser = `-- name: GetTeamFromUser :one
SELECT t.id, t.name, t.password_hash, t.score, t.nationality, t.image, t.bio FROM teams t
  JOIN users u ON u.team_id = t.id
  WHERE u.id = $1
`

// Retrieve the team associated with a user
func (q *Queries) GetTeamFromUser(ctx context.Context, id int32) (Team, error) {
	row := q.queryRow(ctx, q.getTeamFromUserStmt, getTeamFromUser, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, created_at, score, role, team_id, nationality, image FROM users WHERE email = $1
`

// Retrieve a user by their email address
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, created_at, score, role, team_id, nationality, image FROM users WHERE id = $1
`

// Retrieve a user by their ID
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, password_hash, created_at, score, role, team_id, nationality, image FROM users WHERE name = $1
`

// Retrieve a user by their name
func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.queryRow(ctx, q.getUserByNameStmt, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const registerTeam = `-- name: RegisterTeam :exec
WITH locked_user AS (
    SELECT id FROM users
    WHERE id = $1 AND team_id IS NULL
    FOR UPDATE
  ),
  new_team AS (
    INSERT INTO teams (name, password_hash)
    SELECT $2, $3
    FROM locked_user
    RETURNING id, name, password_hash, score, nationality, image, bio
  )
UPDATE users
  SET team_id = new_team.id
  FROM new_team
  WHERE users.id = $1
`

type RegisterTeamParams struct {
	ID           int32       `json:"id"`
	Name         string      `json:"name"`
	PasswordHash interface{} `json:"password_hash"`
}

// Insert a new team and add the founder user to the team
func (q *Queries) RegisterTeam(ctx context.Context, arg RegisterTeamParams) error {
	_, err := q.exec(ctx, q.registerTeamStmt, registerTeam, arg.ID, arg.Name, arg.PasswordHash)
	return err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (name, email, password_hash, role) VALUES ($1, $2, $3, $4) RETURNING id, name, email, password_hash, created_at, score, role, team_id, nationality, image
`

type RegisterUserParams struct {
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	PasswordHash interface{} `json:"password_hash"`
	Role         UserRole    `json:"role"`
}

// Insert a new user and return the created user
func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.queryRow(ctx, q.registerUserStmt, registerUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const resetTeamPassword = `-- name: ResetTeamPassword :exec
UPDATE teams SET password_hash = $1 WHERE id = $2
`

type ResetTeamPasswordParams struct {
	PasswordHash interface{} `json:"password_hash"`
	ID           int32       `json:"id"`
}

// Reset a team's password to a new password
func (q *Queries) ResetTeamPassword(ctx context.Context, arg ResetTeamPasswordParams) error {
	_, err := q.exec(ctx, q.resetTeamPasswordStmt, resetTeamPassword, arg.PasswordHash, arg.ID)
	return err
}

const resetUserPassword = `-- name: ResetUserPassword :exec
UPDATE users SET password_hash = $1 WHERE id = $2
`

type ResetUserPasswordParams struct {
	PasswordHash interface{} `json:"password_hash"`
	ID           int32       `json:"id"`
}

// Reset a user's password to a new password
func (q *Queries) ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error {
	_, err := q.exec(ctx, q.resetUserPasswordStmt, resetUserPassword, arg.PasswordHash, arg.ID)
	return err
}

const submit = `-- name: Submit :one
INSERT INTO submissions (user_id, chall_id, status, flag) VALUES ($1, $2, $3, $4) RETURNING status
`

type SubmitParams struct {
	UserID  int32            `json:"user_id"`
	ChallID int32            `json:"chall_id"`
	Status  SubmissionStatus `json:"status"`
	Flag    string           `json:"flag"`
}

// Insert a new submission
func (q *Queries) Submit(ctx context.Context, arg SubmitParams) (SubmissionStatus, error) {
	row := q.queryRow(ctx, q.submitStmt, submit,
		arg.UserID,
		arg.ChallID,
		arg.Status,
		arg.Flag,
	)
	var status SubmissionStatus
	err := row.Scan(&status)
	return status, err
}

const updateConfig = `-- name: UpdateConfig :exec
UPDATE configs SET value = $2 WHERE key = $1
`

type UpdateConfigParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Update an existing configuration setting
func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) error {
	_, err := q.exec(ctx, q.updateConfigStmt, updateConfig, arg.Key, arg.Value)
	return err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams
SET
  nationality = COALESCE($2, nationality),
  image = COALESCE($3, image),
  bio = COALESCE($4, bio)
WHERE id = $1
`

type UpdateTeamParams struct {
	ID          int32          `json:"id"`
	Nationality sql.NullString `json:"nationality"`
	Image       sql.NullString `json:"image"`
	Bio         sql.NullString `json:"bio"`
}

// Update team details
func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.exec(ctx, q.updateTeamStmt, updateTeam,
		arg.ID,
		arg.Nationality,
		arg.Image,
		arg.Bio,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  name = COALESCE($2, name),
  nationality = COALESCE($3, nationality),
  image = COALESCE($4, image)
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int32          `json:"id"`
	Name        sql.NullString `json:"name"`
	Nationality sql.NullString `json:"nationality"`
	Image       sql.NullString `json:"image"`
}

// Update user details
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.Name,
		arg.Nationality,
		arg.Image,
	)
	return err
}
