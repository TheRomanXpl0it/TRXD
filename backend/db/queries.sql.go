// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addConfig = `-- name: AddConfig :exec
INSERT INTO configs (key, type, value) VALUES ($1, $2, $3)
`

type AddConfigParams struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

// Insert a new configuration setting
func (q *Queries) AddConfig(ctx context.Context, arg AddConfigParams) error {
	_, err := q.exec(ctx, q.addConfigStmt, addConfig, arg.Key, arg.Type, arg.Value)
	return err
}

const addTeamMember = `-- name: AddTeamMember :exec
UPDATE users SET team_id = $1 WHERE id = $2
`

type AddTeamMemberParams struct {
	TeamID sql.NullInt32 `json:"team_id"`
	ID     int32         `json:"id"`
}

// Assign a user to a team
func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.exec(ctx, q.addTeamMemberStmt, addTeamMember, arg.TeamID, arg.ID)
	return err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (name, icon) VALUES ($1, $2)
`

type CreateCategoryParams struct {
	Name interface{} `json:"name"`
	Icon interface{} `json:"icon"`
}

// Insert a new category
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.exec(ctx, q.createCategoryStmt, createCategory, arg.Name, arg.Icon)
	return err
}

const createChallenge = `-- name: CreateChallenge :exec
INSERT INTO challenges (name, category, description, type, max_points, score_type)
	VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateChallengeParams struct {
	Name        interface{} `json:"name"`
	Category    interface{} `json:"category"`
	Description string      `json:"description"`
	Type        DeployType  `json:"type"`
	MaxPoints   int32       `json:"max_points"`
	ScoreType   ScoreType   `json:"score_type"`
}

// Insert a new challenge
func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) error {
	_, err := q.exec(ctx, q.createChallengeStmt, createChallenge,
		arg.Name,
		arg.Category,
		arg.Description,
		arg.Type,
		arg.MaxPoints,
		arg.ScoreType,
	)
	return err
}

const getChallengeByID = `-- name: GetChallengeByID :one
SELECT id, name, category, description, difficulty, authors, type, hidden, max_points, score_type, points, solves, host, port, attachments, image, compose, hash_domain, lifetime, envs, max_memory, max_cpu FROM challenges WHERE id = $1
`

// Retrieve a challenge by its ID
func (q *Queries) GetChallengeByID(ctx context.Context, id int32) (Challenge, error) {
	row := q.queryRow(ctx, q.getChallengeByIDStmt, getChallengeByID, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.Difficulty,
		&i.Authors,
		&i.Type,
		&i.Hidden,
		&i.MaxPoints,
		&i.ScoreType,
		&i.Points,
		&i.Solves,
		&i.Host,
		&i.Port,
		&i.Attachments,
		&i.Image,
		&i.Compose,
		&i.HashDomain,
		&i.Lifetime,
		&i.Envs,
		&i.MaxMemory,
		&i.MaxCpu,
	)
	return i, err
}

const getChallengesByCategory = `-- name: GetChallengesByCategory :many
SELECT id, name, category, description, difficulty, authors, type, hidden, max_points, score_type, points, solves, host, port, attachments, image, compose, hash_domain, lifetime, envs, max_memory, max_cpu FROM challenges WHERE category = $1
`

// Retrieve all challenges in a specific category
func (q *Queries) GetChallengesByCategory(ctx context.Context, category interface{}) ([]Challenge, error) {
	rows, err := q.query(ctx, q.getChallengesByCategoryStmt, getChallengesByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Description,
			&i.Difficulty,
			&i.Authors,
			&i.Type,
			&i.Hidden,
			&i.MaxPoints,
			&i.ScoreType,
			&i.Points,
			&i.Solves,
			&i.Host,
			&i.Port,
			&i.Attachments,
			&i.Image,
			&i.Compose,
			&i.HashDomain,
			&i.Lifetime,
			&i.Envs,
			&i.MaxMemory,
			&i.MaxCpu,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, password_hash, score, nationality, image, bio FROM teams WHERE name = $1
`

// Retrieve a team by its name
func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.queryRow(ctx, q.getTeamByNameStmt, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, created_at, password_hash, apikey, score, role, team_id, nationality, image FROM users WHERE email = $1
`

// Retrieve a user by their email address
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Apikey,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, created_at, password_hash, apikey, score, role, team_id, nationality, image FROM users WHERE name = $1
`

// Retrieve a user by their name
func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.queryRow(ctx, q.getUserByNameStmt, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Apikey,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const registerTeam = `-- name: RegisterTeam :one
INSERT INTO teams (name, password_hash) VALUES ($1, $2) RETURNING id, name, password_hash, score, nationality, image, bio
`

type RegisterTeamParams struct {
	Name         string      `json:"name"`
	PasswordHash interface{} `json:"password_hash"`
}

// Insert a new team and return the created team
func (q *Queries) RegisterTeam(ctx context.Context, arg RegisterTeamParams) (Team, error) {
	row := q.queryRow(ctx, q.registerTeamStmt, registerTeam, arg.Name, arg.PasswordHash)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Score,
		&i.Nationality,
		&i.Image,
		&i.Bio,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (name, email, password_hash, role) VALUES ($1, $2, $3, $4) RETURNING id, name, email, created_at, password_hash, apikey, score, role, team_id, nationality, image
`

type RegisterUserParams struct {
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	PasswordHash interface{} `json:"password_hash"`
	Role         UserRole    `json:"role"`
}

// Insert a new user and return the created user
func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.queryRow(ctx, q.registerUserStmt, registerUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Apikey,
		&i.Score,
		&i.Role,
		&i.TeamID,
		&i.Nationality,
		&i.Image,
	)
	return i, err
}

const submit = `-- name: Submit :exec
INSERT INTO submissions (user_id, chall_id, status, flag) VALUES ($1, $2, $3, $4)
`

type SubmitParams struct {
	UserID  int32            `json:"user_id"`
	ChallID int32            `json:"chall_id"`
	Status  SubmissionStatus `json:"status"`
	Flag    string           `json:"flag"`
}

// Insert a new submission
func (q *Queries) Submit(ctx context.Context, arg SubmitParams) error {
	_, err := q.exec(ctx, q.submitStmt, submit,
		arg.UserID,
		arg.ChallID,
		arg.Status,
		arg.Flag,
	)
	return err
}
