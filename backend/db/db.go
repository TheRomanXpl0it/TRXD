// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addTeamMemberStmt, err = db.PrepareContext(ctx, addTeamMember); err != nil {
		return nil, fmt.Errorf("error preparing query AddTeamMember: %w", err)
	}
	if q.checkFlagsStmt, err = db.PrepareContext(ctx, checkFlags); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFlags: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createChallengeStmt, err = db.PrepareContext(ctx, createChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChallenge: %w", err)
	}
	if q.createConfigStmt, err = db.PrepareContext(ctx, createConfig); err != nil {
		return nil, fmt.Errorf("error preparing query CreateConfig: %w", err)
	}
	if q.createFlagStmt, err = db.PrepareContext(ctx, createFlag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFlag: %w", err)
	}
	if q.getChallengeByIDStmt, err = db.PrepareContext(ctx, getChallengeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallengeByID: %w", err)
	}
	if q.getConfigStmt, err = db.PrepareContext(ctx, getConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetConfig: %w", err)
	}
	if q.getTeamByNameStmt, err = db.PrepareContext(ctx, getTeamByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamByName: %w", err)
	}
	if q.getTeamFromUserStmt, err = db.PrepareContext(ctx, getTeamFromUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamFromUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.registerTeamStmt, err = db.PrepareContext(ctx, registerTeam); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterTeam: %w", err)
	}
	if q.registerUserStmt, err = db.PrepareContext(ctx, registerUser); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterUser: %w", err)
	}
	if q.submitStmt, err = db.PrepareContext(ctx, submit); err != nil {
		return nil, fmt.Errorf("error preparing query Submit: %w", err)
	}
	if q.updateConfigStmt, err = db.PrepareContext(ctx, updateConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateConfig: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addTeamMemberStmt != nil {
		if cerr := q.addTeamMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTeamMemberStmt: %w", cerr)
		}
	}
	if q.checkFlagsStmt != nil {
		if cerr := q.checkFlagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFlagsStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createChallengeStmt != nil {
		if cerr := q.createChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChallengeStmt: %w", cerr)
		}
	}
	if q.createConfigStmt != nil {
		if cerr := q.createConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createConfigStmt: %w", cerr)
		}
	}
	if q.createFlagStmt != nil {
		if cerr := q.createFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFlagStmt: %w", cerr)
		}
	}
	if q.getChallengeByIDStmt != nil {
		if cerr := q.getChallengeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallengeByIDStmt: %w", cerr)
		}
	}
	if q.getConfigStmt != nil {
		if cerr := q.getConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConfigStmt: %w", cerr)
		}
	}
	if q.getTeamByNameStmt != nil {
		if cerr := q.getTeamByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamByNameStmt: %w", cerr)
		}
	}
	if q.getTeamFromUserStmt != nil {
		if cerr := q.getTeamFromUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamFromUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.registerTeamStmt != nil {
		if cerr := q.registerTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerTeamStmt: %w", cerr)
		}
	}
	if q.registerUserStmt != nil {
		if cerr := q.registerUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerUserStmt: %w", cerr)
		}
	}
	if q.submitStmt != nil {
		if cerr := q.submitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing submitStmt: %w", cerr)
		}
	}
	if q.updateConfigStmt != nil {
		if cerr := q.updateConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateConfigStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	addTeamMemberStmt    *sql.Stmt
	checkFlagsStmt       *sql.Stmt
	createCategoryStmt   *sql.Stmt
	createChallengeStmt  *sql.Stmt
	createConfigStmt     *sql.Stmt
	createFlagStmt       *sql.Stmt
	getChallengeByIDStmt *sql.Stmt
	getConfigStmt        *sql.Stmt
	getTeamByNameStmt    *sql.Stmt
	getTeamFromUserStmt  *sql.Stmt
	getUserByEmailStmt   *sql.Stmt
	getUserByIDStmt      *sql.Stmt
	getUserByNameStmt    *sql.Stmt
	registerTeamStmt     *sql.Stmt
	registerUserStmt     *sql.Stmt
	submitStmt           *sql.Stmt
	updateConfigStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		addTeamMemberStmt:    q.addTeamMemberStmt,
		checkFlagsStmt:       q.checkFlagsStmt,
		createCategoryStmt:   q.createCategoryStmt,
		createChallengeStmt:  q.createChallengeStmt,
		createConfigStmt:     q.createConfigStmt,
		createFlagStmt:       q.createFlagStmt,
		getChallengeByIDStmt: q.getChallengeByIDStmt,
		getConfigStmt:        q.getConfigStmt,
		getTeamByNameStmt:    q.getTeamByNameStmt,
		getTeamFromUserStmt:  q.getTeamFromUserStmt,
		getUserByEmailStmt:   q.getUserByEmailStmt,
		getUserByIDStmt:      q.getUserByIDStmt,
		getUserByNameStmt:    q.getUserByNameStmt,
		registerTeamStmt:     q.registerTeamStmt,
		registerUserStmt:     q.registerUserStmt,
		submitStmt:           q.submitStmt,
		updateConfigStmt:     q.updateConfigStmt,
	}
}
