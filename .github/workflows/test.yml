name: TRXd Tests


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass
  POSTGRES_PORT: 2345
  REDIS_PORT: 9736
  CLICOLOR_FORCE: 1
  TEST_WORKERS: 100
  TESTING: 1
  PROJECT_NAME: trxd-test-pipeline


defaults:
  run:
    working-directory: ./backend


jobs:
  diff:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - uses: sqlc-dev/setup-sqlc@v4
      with:
        sqlc-version: '1.29.0'
    - run: sqlc diff


  tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Infra
      run: |
        cd ../
        docker compose -p $PROJECT_NAME up -d

    - name: Build Test Service
      run: |
        cd ../tests/echo-server
        chmod +x ./build.sh
        ./build.sh

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
  
    - name: Install Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y netcat-openbsd
        sudo apt install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install -r ../tests/requirements.txt

    - name: Wait for Postgres
      run: |
        until pg_isready -h localhost -p $POSTGRES_PORT -U testuser -d testdb; do
          echo "Waiting for Postgres..."
          sleep 2
        done

    - name: Build main binary
      run: |
        go build .

    - name: Run Go Unit tests
      run: |
        go test -p=1 -v ./...

    - name: Run Python Integration tests
      run: |
        ./trxd &
        echo $! > server.pid
        for i in {1..20}; do
          if nc -z localhost 1337; then
            echo "Go server is up!"
            break
          fi
          echo "Waiting for Go server..."
          sleep 1
        done
        if ! nc -z localhost 1337; then
          echo "Server did not start in time" >&2
          cat server.pid | xargs kill
          exit 1
        fi
        cd ../tests/

        for file in *.py; do
          echo "Running Test: $file"
          
          cd ../backend
          ./trxd -test-data-WARNING-DO-NOT-USE-IN-PRODUCTION
          ./trxd -t

          cd ../tests/
          python3 $file
        done

        cd -
        kill $(cat ./server.pid)

    - name: Infra Teardown
      run: |
        cd ../
        docker compose -p trxd-test-pipeline down
